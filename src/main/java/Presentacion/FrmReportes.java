/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Presentacion;

import Config.Conexion;
import java.awt.Color;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author zouoz
 */
public class FrmReportes extends javax.swing.JFrame {

    /**
     * Creates new form FrmReportes
     */
    public FrmReportes() {
        initComponents();
        getContentPane().setBackground(Color.WHITE); //no borren
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel11 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel11.setFont(new java.awt.Font("Segoe UI", 0, 32)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(244, 92, 69));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Reportes");
        jLabel11.setToolTipText("");

        jButton1.setText("Estado Formulario Adopcion");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Distribucion por Edades Adoptantes");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Cantidad de Adoptante por Distrito");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(132, 132, 132)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 385, Short.MAX_VALUE)
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(60, 60, 60)
                                .addComponent(jLabel11)
                                .addGap(53, 53, 53)))))
                .addContainerGap(144, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel11)
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
            // TODO add your handling code here:
        Connection con = null;
        Conexion cn = new Conexion();
        PreparedStatement ps = null;
        ResultSet rs = null;

        try {
            // Establecer conexión con la base de datos
            con = (Connection) cn.getConnection();

            // Consulta SQL para obtener el recuento de formularios en cada estado
            String consulta = "SELECT estado, COUNT(*) AS cantidad FROM formularioadopcion GROUP BY estado";

            // Preparar la consulta
            ps = con.prepareStatement(consulta);

            // Ejecutar la consulta
            rs = ps.executeQuery();

            // Crear un dataset para el gráfico de pie
            DefaultPieDataset dataset = new DefaultPieDataset();

            // Procesar los resultados y agregarlos al dataset
            while (rs.next()) {
                String estado = rs.getString("estado");
                int cantidad = rs.getInt("cantidad");
                dataset.setValue(estado, cantidad);
            }

            // Crear el gráfico de pie
            JFreeChart chart = ChartFactory.createPieChart(
                "Estados de Formularios de Adopción", // Título del gráfico
                dataset, // Dataset
                true, // Mostrar leyenda
                true, // Mostrar tooltips
                false // No generar URLs
            );

            // Mostrar el gráfico en un ChartFrame
            ChartFrame frame = new ChartFrame("Gráfico de Pie", chart);
            frame.pack();
            frame.setVisible(true);
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            // Cerrar la conexión y liberar recursos en el bloque finally
            try {
                if (rs != null) {
                    rs.close();
                }
                if (ps != null) {
                    ps.close();
                }
                if (con != null) {
                    con.close();
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
                // TODO add your handling code here:
        Connection con = null;
        Conexion cn = new Conexion();
        PreparedStatement ps = null;
        ResultSet rs = null;

        try {
            // Establecer conexión con la base de datos
            con = (Connection) cn.getConnection();

            // Consulta SQL para obtener el recuento de adoptantes en diferentes rangos de edades
            String consulta = "SELECT CONCAT(FLOOR(edad / 10) * 10, ' - ', FLOOR(edad / 10) * 10 + 9) AS rango_edad, COUNT(*) AS cantidad_adoptantes " +
                "FROM adoptante " +
                "GROUP BY FLOOR(edad / 10)";

            // Preparar la consulta
            ps = con.prepareStatement(consulta);

            // Ejecutar la consulta
            rs = ps.executeQuery();

            // Crear un dataset para el gráfico de barras
            DefaultCategoryDataset dataset = new DefaultCategoryDataset();

            // Procesar los resultados y agregarlos al dataset
            while (rs.next()) {
                String rangoEdad = rs.getString("rango_edad");
                int cantidadAdoptantes = rs.getInt("cantidad_adoptantes");
                dataset.addValue(cantidadAdoptantes, "Cantidad de Adoptantes", rangoEdad);
            }

            // Crear el gráfico de barras
            JFreeChart chart = ChartFactory.createBarChart(
                "Distribución de Edades de los Adoptantes", // Título del gráfico
                "Rango de Edades", // Etiqueta del eje X
                "Cantidad de Adoptantes", // Etiqueta del eje Y
                dataset, // Dataset
                PlotOrientation.VERTICAL, // Orientación del gráfico
                true, // Mostrar leyenda
                true, // Mostrar tooltips
                false // No generar URLs
            );

            // Mostrar el gráfico en un ChartFrame
            ChartFrame frame = new ChartFrame("Gráfico de Barras", chart);
            frame.pack();
            frame.setVisible(true);
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            // Cerrar la conexión y liberar recursos en el bloque finally
            try {
                if (rs != null) {
                    rs.close();
                }
                if (ps != null) {
                    ps.close();
                }
                if (con != null) {
                    con.close();
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }    


    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        Connection con = null;
    Conexion cn = new Conexion();
    PreparedStatement ps = null;
    ResultSet rs = null;

    try {
        con = cn.getConnection();  // Obtener conexión a la base de datos
        String consulta = "SELECT d.nombre AS Distrito, COUNT(a.idAdoptante) AS Cantidad " +
                          "FROM adoptante a " +
                          "INNER JOIN distrito d ON a.idDistrito = d.idDistrito " +
                          "GROUP BY d.nombre;";  // Consulta SQL
        ps = con.prepareStatement(consulta);
        rs = ps.executeQuery();

        DefaultCategoryDataset dataset = new DefaultCategoryDataset();  // Crear dataset

        while (rs.next()) {
            String distrito = rs.getString("Distrito");
            int cantidad = rs.getInt("Cantidad");
            dataset.addValue(cantidad, "Cantidad de Adoptantes", distrito);  // Agregar datos al dataset
        }

        JFreeChart chart = ChartFactory.createBarChart(
            "Cantidad de Adoptantes por Distrito",  // Título del gráfico
            "Distrito",  // Etiqueta del eje X
            "Cantidad de Adoptantes",  // Etiqueta del eje Y
            dataset, 
            PlotOrientation.VERTICAL, 
            true, 
            true, 
            false 
        );

        ChartFrame frame = new ChartFrame("Gráfico de Barras - Distritos", chart);  // Crear y mostrar el frame
        frame.pack();
        frame.setVisible(true);
    } catch (SQLException e) {
        e.printStackTrace();
    } finally {
        try {
            if (rs != null) rs.close();
            if (ps != null) ps.close();
            if (con != null) con.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmReportes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmReportes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmReportes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmReportes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmReportes().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel11;
    // End of variables declaration//GEN-END:variables
}
